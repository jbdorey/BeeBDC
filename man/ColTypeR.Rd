% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ColTypeR.R
\name{ColTypeR}
\alias{ColTypeR}
\title{Sets up column names and types}
\usage{
ColTypeR(...)
}
\arguments{
\item{...}{Arguments that are additional to those default to the function. For example:
\itemize{
\item newCharacterColumn = col_character(),
\item newNumericColumn = col_integer(),
\item newLogicalColumn = col_logical()
}}
}
\value{
An object of class col_spec. See \code{\link[readr:as.col_spec]{readr::as.col_spec()}}
}
\description{
Uses \code{\link[readr:cols]{readr::cols_only()}} to assign a column name and the type of data (e.g., \code{\link[readr:parse_atomic]{readr::col_character()}},
and \code{\link[readr:parse_atomic]{readr::col_integer()}}). To see the default columns simply run \code{\link[=ColTypeR]{ColTypeR()}}. Intended
to be used with \code{\link[readr:read_delim]{readr::read_csv()}}. Columns that are not present will NOT be included in the resulting
tibble unless they are specified using \link{...}.
}
\examples{
You can simply return the below for default values
ColTypeR() 

To add new columns you can write
ColTypeR(newCharacterColumn = col_character(), newNumericColumn = col_integer(), newLogicalColumn = col_logical()) 

Try reading in one of the test datasets as an example:
beesFlagged \%>\% tibble::as_tibble(col_types = ColTypeR())
OR
beesRaw \%>\% tibble::as_tibble(col_types = ColTypeR())


}
