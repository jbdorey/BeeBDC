% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jbd_CfC_chunker.R
\name{jbd_CfC_chunker}
\alias{jbd_CfC_chunker}
\title{A wrapper around \code{\link[=jbd_country_from_coordinates]{jbd_country_from_coordinates()}} to chunk analyses}
\usage{
jbd_CfC_chunker(
  data = NULL,
  lat = "decimalLatitude",
  lon = "decimalLongitude",
  country = "country",
  stepSize = 1e+06,
  chunkStart = 1,
  append = FALSE
)
}
\arguments{
\item{data}{A data frame or tibble. Occurrence records as input.}

\item{lat}{Character. The name of the column to use as latitude. Default = "decimalLatitude".}

\item{lon}{Character. The name of the column to use as longitude. Default = "decimalLongitude".}

\item{country}{Character. The name of the column containing country names. Default = "country.}

\item{stepSize}{Numeric. The number of occurrences to process in each chunk. Default = 1000000.}

\item{chunkStart}{Numeric. The chunk number to start from. This can be > 1 when you need to restart
the function from a certain chunk; for example if R failed unexpectedly.}

\item{append}{Logical. If TRUE, the function will look to append an existing file.}
}
\value{
A data frame containing database_ids and a country column
that needs to be re-merged with the data input.
}
\description{
Because the \code{\link[=jbd_country_from_coordinates]{jbd_country_from_coordinates()}} function is very RAM-intensive, this wrapper
allows a user to specify chunk-sizes and only analyse a small portion of the occurrence data at a
time. The prefix jbd_ is used to highlight the difference between that function and the related
\code{\link[bdc:bdc_country_from_coordinates]{bdc::bdc_country_from_coordinates()}}.
}
\examples{
# Because this function iteratively adds to a save file in the background, for simplicity's sake
and for the sake of transparency the output needs to be added to the data input
outside of the main function.
# Tibble of common issues in country names and their replacements
commonProblems <- tibble::tibble(problem = c('U.S.A.', 'US','USA','usa','UNITED STATES','United States','U.S.A','MX','CA','Bras.','Braz.','Brasil','CNMI','USA TERRITORY: PUERTO RICO'),
                                 fix = c('United States of America','United States of America','United States of America','United States of America','United States of America','United States of America','United States of America','Mexico','Canada','Brazil','Brazil','Brazil','Northern Mariana Islands','PUERTO.RICO'))

beesFlagged_out <- jbd_countryNameCleanR(
  data = BeeDC::beesFlagged,
  commonProblems = commonProblems)

suppressWarnings(
  countryOutput <- jbd_CfC_chunker(data = beesFlagged_out,
                                   lat = "decimalLatitude",
                                   lon = "decimalLongitude",
                                   country = "country",
                                   # How many rows to process at a time
                                   stepSize = 1000000,
                                   # Start row
                                   chunkStart = 1,
                                   append = FALSE),
  classes = "warning")


# Left join these datasets
beesFlagged_out <- left_join(beesFlagged_out, countryOutput, by = "database_id")  \%>\% 
  # merge the two country name columns into the "country" column
  dplyr::mutate(country = dplyr::coalesce(country.x, country.y)) \%>\%
  # remove the now redundant country columns 
  dplyr::select(!c(country.x, country.y)) \%>\%
  # put the column back 
  dplyr::relocate(country) \%>\% 
  # Remove duplicates if they arose!
  dplyr::distinct()

# Remove illegal characters
beesFlagged_out$country <- beesFlagged_out$country \%>\%
  stringr::str_replace(., pattern = paste("\\\\[", "\\\\]", "\\\\?",
                                          sep=  "|"), replacement = "")
# Replace the problems as they occur
beesFlagged_out <- beesFlagged_out \%>\%
  dplyr::left_join(commonProblems, by = c("country" = "problem")) \%>\%
  dplyr::mutate(country = 
                  dplyr::if_else(country \%in\% commonProblems$problem,
                                 fix, country)) \%>\%
  dplyr::select(!fix)
}
